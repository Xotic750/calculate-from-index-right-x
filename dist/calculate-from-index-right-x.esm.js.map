{"version":3,"sources":["../src/calculate-from-index-right-x.js"],"names":[],"mappings":"AAAA,OAAO,QAAP,MAAqB,aAArB;AAEA,OAAO,QAAP,MAAqB,aAArB;AACA,OAAO,SAAP,MAAsB,cAAtB;AACA,OAAO,WAAP,MAAwB,iBAAxB;;AAEA,IAAM,MAAM,GAAG,SAAS,OAAT,CAAiB,CAAjB,EAAoB,CAApB,EAAuB;AACpC,SAAO,CAAC,IAAI,CAAL,GAAS,CAAT,GAAa,CAApB;AACD,CAFD;AAIA;;;;;;;;;;;AASA,IAAM,kBAAkB,GAAG,SAAS,kBAAT,CAA4B,KAA5B,EAAmC,SAAnC,EAA8C;AACvE,MAAM,MAAM,GAAG,QAAQ,CAAC,KAAD,CAAvB;;AAEA,MAAI,WAAW,CAAC,MAAD,CAAX,KAAwB,KAA5B,EAAmC;AACjC,WAAO,CAAP;AACD;;AAED,MAAM,MAAM,GAAG,QAAQ,CAAC,MAAM,CAAC,MAAR,CAAvB;AACA,MAAM,KAAK,GAAG,MAAM,CAAC,SAAS,CAAC,SAAD,CAAV,EAAuB,MAAM,GAAG,CAAhC,CAApB;AAEA,SAAO,KAAK,IAAI,CAAT,GAAa,KAAb,GAAqB,MAAM,GAAG,KAArC;AACD,CAXD;;AAaA,eAAe,kBAAf","file":"calculate-from-index-right-x.esm.js","sourcesContent":["import toObject from 'to-object-x';\n\nimport toLength from 'to-length-x';\nimport toInteger from 'to-integer-x';\nimport isArrayLike from 'is-array-like-x';\n\nconst getMin = function _getMin(a, b) {\n  return a <= b ? a : b;\n};\n\n/**\n * This method calculates a fromIndexRight of a given value for an array.\n *\n * @param {Array} array - The array on which to calculate the starting index.\n * @throws {TypeError} If array is null or undefined.\n * @param {number} fromIndex - The position in this array at which to begin. A\n *  negative value gives the index of array.length + fromIndex by asc.\n * @returns {number} The calculated fromIndex. Default is 0.\n */\nconst calcFromIndexRight = function calcFromIndexRight(array, fromIndex) {\n  const object = toObject(array);\n\n  if (isArrayLike(object) === false) {\n    return 0;\n  }\n\n  const length = toLength(object.length);\n  const index = getMin(toInteger(fromIndex), length - 1);\n\n  return index >= 0 ? index : length + index;\n};\n\nexport default calcFromIndexRight;\n"]}